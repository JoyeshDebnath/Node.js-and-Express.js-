What is Node ?
>> Node js is an environment to run js Outside of the browser 
With node js we built server side apps. It has no access to browser apis as it does not run on browser It runs outside of the browser  

Diff between the Browser and Node js apps. 

Browser Apps:
-------------------
It has access to all DOM,Window object ,Does not have any access to File system ,It depends on Browser ie if the user running on another browser then the application might break down because of the diff version.

NodeJS app 
--------------------------------

Node js apps does not have access t DOM,Window object,But it has 
all access to file systems ,System information.These app are server side apps which runs on server does not depends on browser depends on Node version.

/*   */
__dirname - Path to the current  directory
__filename - File name 
require- Function to use modules (CommonJS)
module- info about the current module (file )
process - info about the environment where the program is being  executed
/*             */

If we execute the command :  console.log(module )  we get the following ::
😯   😯    😯     😯    😯    😯
Module {
  id: '.',
  path: 'C:\\Users\\KIIT\\Desktop\\Backend Practice\\Sample_codes',
  exports: {},
  filename: 'C:\\Users\\KIIT\\Desktop\\Backend Practice\\Sample_codes\\4-Names.js',
  loaded: false,
  children: [],
  paths: [
    'C:\\Users\\KIIT\\Desktop\\Backend Practice\\Sample_codes\\node_modules',
    'C:\\Users\\KIIT\\Desktop\\Backend Practice\\node_modules',
    'C:\\Users\\KIIT\\Desktop\\node_modules',
    'C:\\Users\\KIIT\\node_modules',
    'C:\\Users\\node_modules',
    'C:\\node_modules'
  ]
}
😯    😯    😯    😯    😯   😯 

In above the exports is responsible for a pretty cool thing .. what ever we include inside exports it is going to be accessible everywhere . 


>>Inorder to share the data between the modules we use ::  
  ## module.exports={sharable object properties }

  >> inorder to access the data shared we use:: 
  ## const var_name=require('./file path of data');



  Alternative method of exporting  
  ------------------------------------------

  You can also try one of the following alternative methods of exporting data in Node 👇👇: 

  1>module.exports.shared_property=[some property];
                   OR 
  2>const my_object={some property};
  module.exports.shared_object=my_object;


  Built_IN_MODULES in NODE.js 👇👇: 
  >>OS
  >>PATH
  >>FS
  >>Http

  1>OS module : It provides many functions to interact with the the operating system and server.

  2>Path module provides a no of different functions to interact with the file and folder paths.



  HTTP module: 
  --------------------
  syntax: const my_server=http.createServer((request,result)=>{

  })

  the createServer takes a callback function which recieves  2 parametrs which are objects . 1> request which is the client request to the server and 2> result : which is our response to the client 
  

  Package.json is a very imp file that holds all the vital information and configuration about our project folders and dependencies.  
  To install it or set it in our project there are 3 ways : 
  1> Manually create a package.json but it should be at the root of the project we are currently  Working.and then create all the properties manually....
  2> npm init (step by step, press enter to skip);
  3> npm init -y(everything default) 

  
  Do install and add the node_modules package in project use the command : 
  >>  npm install nodemon -D


  🎅   🎅  🤶   🤶   🤶  👼   🧔   👲  👲    👲
  try these in package.json 👇

   "scripts": {
    "start":"node app.js",
    "dev":"nodemon app.js"
  },


>> u will see that if u run npm start or npm run start or npm run dev then the app.js will get executed. that is here in package.json under the scripts we can set our own commands .

IMP:::::👇👇👇

>> since we set >> 👉 "dev":"nodemon app.js "  👈
 >>>>>> this allows nodemon to keep an eye on our app.js and every time we make any changes to the app.js the app.js will get automatically restarted and executed ie we dont need to run any start command after making changes in the app.js file . the nodemon keeps an eye on the file and does the job automatically .. 👲  u can also set the "start": as "nodemon app.js " instead of node app.js so that the nodemon will keep an eye on ur app.js like previous and instead of typing the command npm start every time as before after making any changes to the app.js file and saving the changes  u just need to type once npm start and the nodemon will automatically start the app.js file once u have saved the changes u made on app.js file ..........

!ANCHOR remember the nodemon will keep on running behind to stop it press (ctrl+c)




  
  🎅   🎅  🤶   🤶   🤶  👼   🧔   👲  👲    👲



  To install any package or dependencies : 
  ---------------------------------------


  we need to type the command :    npm install <Packagename>
  ex:   npm install Firebase 

  To uninstall any package : run the command :   npm uninstall <Packagename>
  ex:   npm uninstall Firebase

-------------------------------------------------------------

To learn more about the package.lock.json  visit::    https://blog.logrocket.com/why-you-should-use-package-lock-json/